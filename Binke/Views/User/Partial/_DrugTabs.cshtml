@model Binke.ViewModels.DrugTabsViewModel

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
        &times;
    </button>
    <h4 class="modal-title" id="myModalLabel">
        @(Model.Id == 0 ? "Add Drug Tabs" : Model.IsViewMode ? "View Drug Tabs":"Edit Drug Tabs")
    </h4>
</div>
<div class="modal-body">
    @using (Html.BeginForm("AddEditDrugTabs", "User", FormMethod.Post, new { id = "frmDrugTabs" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id)
      
        <div class="row">
            <div class="col-md-12">
                <label class="control-label"><b>Drug Tabs Name</b></label>
                <div class="form-group">
                    @if (!Model.IsViewMode)
                    {
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "Enter Drug Tabs Name" })
                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "Enter Drug Tabs Name",@readonly="true" })
                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                    }
                </div>
            </div>
            <div class="col-md-12">
                <label class="control-label"><b>Description</b></label>
                <div class="form-group">
                    @if (!Model.IsViewMode)
                    {
                        @Html.TextBoxFor(m => m.Description, new { @class = "form-control", placeholder = "Enter Description" })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Description, new { @class = "form-control", placeholder = "Enter Description",@readonly="true" })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                    }
                </div>
            </div>
           
        </div>

    }
</div>
<div class="modal-footer">
    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
    @if (!Model.IsViewMode)
    {
        <button type="button" id="btnSave" class="btn btn-primary">Submit</button>
    }
    </div>

@Scripts.Render("~/scripts/full-calendar")

<script type="text/javascript">
 
    $("#btnSave").click(function () {
        $.validator.unobtrusive.parse($('#frmDrugTabs'));
        if ($("#frmDrugTabs").valid()) {
            $.post("@Url.Action("AddEditDrugTabs")", $("#frmDrugTabs").serialize(), function (response) {
                HandleResponse(response);
                if (response.Status) {
                    if (response.Data == "DrugTabs") {
                        bindExperienceList();
                        closeModal();
                    } else {
                        location.reload();
                    }
                }
            });
        }
    });

   

</script>